import operator as op
import numpy as np
import pandas as pd
import requests
import param
import panel as pn
import hvplot.pandas
import hvplot.streamz
import holoviews as hv
from holoviews.element.tiles import EsriImagery
from holoviews.selection import link_selections
from datashader.utils import lnglat_to_meters
from streamz.dataframe import PeriodicDataFrame

def sensor_data(sensor):
    df=pd.read_csv('getdata7.csv')
    return (df.loc[df['DetectorID']==sensor]).set_index('DateTimeStamp')


sensor = '112_2_44'

def streaming_sensor_data(**kwargs):
    df = sensor_data(sensor)
    df['DateTimeStamp'] = [pd.Timestamp.now()]
    print(df)
    return df.set_index('DateTimeStamp')

# Make a streaming dataframe 
df = PeriodicDataFrame(streaming_sensor_data, interval='20s')

pn_realtime = pn.Column(
    df[['Occupancy']].hvplot.line(title='Occupancy', backlog=1000),
    df[['Volume']].hvplot.line(title='Volume', backlog=1000),
    df[['Speed']].hvplot.line(title='Speed', backlog=1000)
)

sensors = ['112_2_44', '113_2_45', '122_2_48', '124_2_49', '146_2_238', '149_2_240', '160_2_242', '34_1_94', '354_1_79', '354_2_144', '354_3_145', '355_1_156', '355_2_153', '355_3_155', '356_1_309', '356_2_308', '357_3_310', '358_1_325', '396_1_243', '398_2_251', '438_1_331', '438_2_330', '438_3_329', '439_1_334', '439_2_333', '439_3_332', '48_2_83', '49_1_82', '49_2_12', '49_3_15', '58_2_17', '59_1_18', '59_2_18', '70_2_21', '71_2_23', '72_2_28', '89_1_28', '89_2_30', '97_1_33', '97_2_33', '97_3_38', '99_1_35', '440_1_335', '359_1_325', '358_2_320', '358_3_319', '357_1_312', '357_2_311', '32_1_142', '39_2_88', '72_1_22', '110_1_41', '137_1_80', '138_1_53', '138_2_55', '148_2_58', '396_2_246', '396_3_246', '397_1_247', '397_2_248', '398_1_249']

def sensor_plot(col, sensors = sensors):
    df = sensor_data(sensors)
    df['x'], df['y'] = lnglat_to_meters(df['longitude'], df['latitude'])
    table = hv.Table(df[['DetectorID', col]]).opts(width=800)
    points = df.hvplot.scatter('x','y', c=col, cmap='bkr', hover_cols=['DetectorID'])
    map_tiles  = EsriImagery().opts(alpha=0.5, width=900, height=480, bgcolor='white')
    return  pn.Column(points * map_tiles, table)

class refresh_sensor_dashboard(param.Parameterized):
    action = param.Action(lambda x: x.param.trigger('action'), label='Refresh')
    select_column1 = param.ObjectSelector(default='Occupancy', objects=['Occupancy', 'Speed', 'Volume'])
    select_column2 = param.ObjectSelector(default='112_2_44', objects=['112_2_44', '113_2_45', '122_2_48', '124_2_49', '146_2_238', '149_2_240', '160_2_242', '34_1_94', '354_1_79', '354_2_144', '354_3_145', '355_1_156', '355_2_153', '355_3_155', '356_1_309', '356_2_308', '357_3_310', '358_1_325', '396_1_243', '398_2_251', '438_1_331', '438_2_330', '438_3_329', '439_1_334', '439_2_333', '439_3_332', '48_2_83', '49_1_82', '49_2_12', '49_3_15', '58_2_17', '59_1_18', '59_2_18', '70_2_21', '71_2_23', '72_2_28', '89_1_28', '89_2_30', '97_1_33', '97_2_33', '97_3_38', '99_1_35', '440_1_335', '359_1_325', '358_2_320', '358_3_319', '357_1_312', '357_2_311', '32_1_142', '39_2_88', '72_1_22', '110_1_41', '137_1_80', '138_1_53', '138_2_55', '148_2_58', '396_2_246', '396_3_246', '397_1_247', '397_2_248', '398_1_249'])
       
    @param.depends('action', 'select_column1', 'select_column2')
    def get_plot(self):
        return sensor_plot(self.select_column1)

    
sensor_dashboard = refresh_sensor_dashboard()

pn_sensor = pn.Column(
       pn.panel(sensor_dashboard.param, show_labels=True, show_name=False, margin=0),
       sensor_dashboard.get_plot, width=400
)

gspec = pn.GridSpec(sizing_mode='stretch_both', max_height=800)

gspec[0, 0] = pn_realtime
gspec[0, 1] = pn_sensor

gspec.servable()
